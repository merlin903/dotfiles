#+TITLE: System Configuration
#+PROPERTY: header-args :tangle yes :shebang #!/usr/bin/env bash :mkdirp t

* Table of Contents
:PROPERTIES:
:TOC: this
:END:

* Systems
** Base Configuration

This is the base configuration that's shared between all of my computers.

*** Install Homebrew

Homebrew allows su to install UNIX programs similar to =apt-get= on Linux systems.

#+begin_src sh :tangle ./.config/homebrew/shared.sh

# NOTE: This file is generated from ~/Development/sametjan/dotfiles/System.org.
# It should not be run directly, but as part of the per-system setup script.
# Install Homebrew
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

#+end_src

*** Taps

Not everyting we use is in the base Homebrew tap, so let's add some more.

#+begin_src sh :tangle ./.config/homebrew/shared.sh

brew tap d12frosted/emacs-plus # Better Emacs
brew tap homebrew/cask # MacOS Apps
brew tap homebrew/cask-fonts # Fonts
brew tap homebrew/cask-versions # Alternate versions from `homebrew/cask`

#+end_src

*** GNU Utilities

The GNU utilities that come with MacOS are outdated or customized by Apple. We'll install newer GNU versions.

#+begin_src sh :tangle ./.config/homebrew/shared.sh

brew install coreutils
brew install moreutils
brew install findutils
brew install gnu-sed

#+end_src

*** Shells

As of MacOS Catalina 10.15.7, =bash= and =zsh= are outdated. Update these to the newest versions,
as well as install the =fish= shell and =bash-completion=, and add them to =/etc/shells= so we can
start using them.

#+begin_src sh :tangle ./.config/homebrew/shared.sh

# Bash
brew install bash
brew install bash-completion

#ZSH and Fish
brew install zsh
brew install fish

# Add them to /etc/shells
echo $(brew --prefix)/bin/bash | sudo tee -a /etc/shells
echo $(brew --prefix)/bin/zsh | sudo tee -a /etc/shells
echo $(brew --prefix)/bin/fish | sudo tee -a /etc/shells

#+end_src

*** Outdated System Software

There are other UNIX programs that are outdated on MacOS as well. We should probably update those as well.

#+begin_src sh :tangle ./.config/homebrew/shared.sh

brew install vim # Blasphemy, I know.
brew install grep
brew install git

#+end_src

*** Programming Languages

I primarilly use Node and Python, both at home and at work, and need multiple versions of them for different
projects.

#+begin_src sh :tangle ./.config/homebrew/shared.sh

brew install nvm
brew install pyenv
brew install pyenv-virtualenv

#+end_src

** Per-system Configuration
*** Home
#+PROPERTY: header-args :tangle ./.config/soundwave/setup.sh :shebang #!/usr/bin/env bash :mkdirp t

Soundwave is my 2018 MacBook Pro that I use at home.

**** Homebrew

Install the shared programs from Homebrew.

#+begin_src sh
../homebrew/shared.sh
#+end_src

**** Additional Programming Languages

I'm starting to learn Haskell, so let's install that at home.

#+begin_src sh

# Install Haskell
curl https://get-ghcup.haskell.org -sSf | sh

#+end_src

*** Work

This is my work issued laptop. It's currently a 2015 MacBook Pro.

* Dotfiles Management

These scripts are taken from [[https://github.com/daviwil/dotfiles/][daviwil's dotfiles]].

** Syncing

*.bin/sync-dotfiles*

#+begin_src sh :tangle .bin/sync-dotfiles :shebang #!/bin/sh

# Sync dotfiles repo and ensure that dotfiles are tangled correctly afterward

GREEN='\033[1;32m'
BLUE='\033[1;34m'
RED='\033[1;30m'
NC='\033[0m'

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))
cd ..

echo
echo -e "${BLUE}Saving Org buffers if Emacs is running...${NC}"
emacsclient -u -e "(org-save-all-org-buffers)" -a "echo 'Emacs is not currently running'"

echo -e "${BLUE}Stashing existing changes...${NC}"
stash_result=$(git stash push -m "sync-dotfiles: Before syncing dotfiles")
needs_pop=1
if [ "$stash_result" = "No local changes to save" ]; then
    needs_pop=0
fi

echo -e "${BLUE}Pulling updates from dotfiles repo...${NC}"
echo
git pull origin master
echo

if [[ $needs_pop -eq 1 ]]; then
    echo -e "${BLUE}Popping stashed changes...${NC}"
    echo
    git stash pop
fi

unmerged_files=$(git diff --name-only --diff-filter U)
if [[ ! -z $unmerged_files ]]; then
   echo -e "${RED}The following files have merge conflicts after popping the stash:${NC}"
   echo
   printf %"s\n" $unmerged_files  # Ensure newlines are printed
else
    update-dotfiles
fi

#+end_src

** Updating

*.bin/update-dotfiles*

#+begin_src sh :tangle .bin/update-dotfiles :shebang #!/bin/sh

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))
cd ..

# The heavy lifting is done by an Emacs script
emacs -Q --script ./.emacs.d/tangle-dotfiles.el

# Make sure any running Emacs instance gets updated settings
emacsclient -e '(load-file "~/.emacs.d/per-system-settings.el")' -a "echo 'Emacs is not currently running'"

#+end_src

*.emacs.d/tangle-dotfiles.el*

#+begin_src emacs-lisp :tangle .emacs.d/tangle-dotfiles.el

(require 'org)

;; Don't ask when evaluating code blocks
(setq org-confirm-babel-evaluate nil)

(let* ((dotfiles-path (expand-file-name "~/.dotfiles"))
       (org-files (directory-files dotfiles-path nil "\\.org$")))
  (dolist (org-file org-files)
    (unless (equal org-file "README.org")
      (message "\n\033[1;32mUpdating %s\033[0m\n" org-file)
      (org-babel-tangle-file (expand-file-name org-file dotfiles-path)))))

#+end_src
