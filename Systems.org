#+TITLE: System Configuration
#+PROPERTY: header-args :tangle yes :mkdirp t :shebang #!/usr/bin/env bash

* Table of Contents
:PROPERTIES:
:TOC: this
:END:

* Systems

** Base Configuration

This base configuration is shared betweeen all of my MacOS machines. 

*** MacOS Preferences

Since I'm only using Apple laptops, we'll apply our basic preferences, and add customizations 
based on the age of the machine (i.e. touchbar).

Start off the script by making sure that =System Preferences.app= isn't running, as that 
can cause problems when setting preferences progrmatically. I also need =sudo= throughout the
script, so I'll ask for that upfront, and refresh its timestamp until the script is finished.

#+begin_src sh :tangle .config/macos.sh

  # NOTE: This file is generated from $HOME/Development/sametjan/dotfiles/Systems.org. Please see commentary there.
  # Close any open System Preferences panes, to prevent them from overriding
  # settings we're about to change.
  osascript -e 'tell application "System Preferences" to quit'

  # Ask for the administrator password upfront
  sudo -v

  # Keep-alilve: update existing `sudo` timestamp until script has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

#+end_src

Make sure that the startup chime is enabled

#+begin_src sh :tangle .config/macos.sh
  sudo nvram SystemMute=%00
#+end_src

**** General UI/UX

Tweak the UI to our preferences. This includes:
- Theme
- Colors
- Scrollbars
- Save and Print panels

#+begin_src sh :tangle .config/macos.sh

  # Use dark mode
  defaults write NSGlobalDomain AppleInterfaceStyle -string Dark

  # Set accent color to Graphite
  defaults write NSGlobalDomain AppleAccentColor -int -1

  # Set highlight color to Graphite
  defaults write NSGlobalDomain AppleHighlightColor -string "0.847059 0.847059 0.862745"

  # Automatically show/hide the scrollbar
  defaults write NSGlobalDomain AppleShowScrollBars -string "Automatic"

  # Disable the focus ring animation
  defaults write NSGlobalDomain NSUseANimatedFocusRing -bool false

  # Expand the save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # Expand the print panel by default
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  # Automatically quit the printer app when the print jobs complete
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # Disable Resume system-wide
  defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

  # Disable automatic termination of inactive apps
  defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

  # Reveal IP address, hostname, OS version, etc. when clicking the clock
  # in the login window
  sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

#+end_src

**** Input devices

Tweak the trackapd, keyboard, and various other input devices

#+begin_src sh :tangle .config/macos.sh

  # Trackpad: enable tap to click for this user and for the login screen
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # Enable full keyboard access for all controls
  # (e.g. enable Tab in modal dialogs)
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

  # Use scroll gesture with the Ctrl (^) modifier key to zoom
  defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
  defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
  # Follow the keyboard focus while zoomed in
  defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

  # Set language and text formats
  # US English and Japanese
  defaults write NSGlobalDomain AppleLanguages -array "en-US" "ja"
  defaults write NSGlobalDomain AppleLocale -string "en_US@currency=USD"
  defaults write NSGlobalDomain AppleMeasurementUnits -string "Inches"
  defaults write NSGlobalDomain AppleMetricUnits -bool false

  # Show language menu in the top right corner of the boot screen
  sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true

#+end_src

**** Energy Settings

Tweak the Energy Saver settings

#+begin_src sh :tangle .config/macos.sh

  # Enable lid wakeup
  sudo pmset -a lidwake 1

  # Restart automatically on power loss
  sudo pmset -a autorestart 1

  # Restart automatically if the computer freezes
  sudo systemsetup -setrestartfreeze on

  # Sleep the display after 15 minutes
  sudo pmset -a displaysleep 15

  # Disable machine sleep while charging
  sudo pmset -c sleep 0

  # Set machine sleep to 5 minutes on battery
  sudo pmset -b sleep 5

  # Set standby delay to 24 hours (default is 1 hour)
  sudo pmset -a standbydelay 86400

  # Never go into computer sleep mode
  sudo systemsetup -setcomputersleep Off > /dev/null

  # Hibernation mode
  # 0: Disable hibernation (speeds up entering sleep mode)
  # 3: Copy RAM to disk so the system state can still be restored in case of a
  #    power failure.
  sudo pmset -a hibernatemode 0

  # Remove the sleep image file to save disk space
  sudo rm /private/var/vm/sleepimage
  # Create a zero-byte file instead…
  sudo touch /private/var/vm/sleepimage
  # …and make sure it can’t be rewritten
  sudo chflags uchg /private/var/vm/sleepimage

#+end_src

**** Restart apps to apply changes

Most of these changes won't take effect until the apps are restarted, so loop through the apps,
and kill them.

#+begin_src sh :tangle .config/macos.sh

  ################################################################
  # Kill all affected applications
  ################################################################
  for app in "Activity Monitor" \
		 "Address Book" \
		 "Calendar" \
		 "cfprefsd" \
		 "Contacts" \
		 "Dock" \
		 "Finder" \
		 "Google Chrome" \
		 "Mail" \
		 "Messages" \
		 "Photos" \
		 "Safari" \
		 "SystemUIServer" \
		 "Terminal"; do
      killall "${app}" &> /dev/null
  done

#+end_src

Finally, echo a reminder to restart or logout so all the changes can take effect

#+begin_src sh :tangle .config/macos.sh
  echo "Done. Note that some of these changes require a logout/restart to take effect."
#+end_src

*** Homebrew

*** MacOS Apps (Casks and MAS)

*** Bash

*** ZSH

*** Fish

** Machines

**** MacOS Preferences



*** Per-System Settings

*** Soundwave

**** MacOS Preferences

Set the computer name.
#+begin_src sh :tangle .config/macos.sh

  # Get computer name
  currentName=$(scutil --get ComputerName)

  computerName="Soundwave"
  # Set computer name (as done via System Preferences -> Sharing)
  if [[ $currentName =~ (MacBook Pro)$ ]]; then
      sudo scutil --set ComputerName $computerName
      sudo scutil --set HostName  ${computerName// /-}
      sudo scutil --set LocalHostName ${computerName// /-}
  fi

#+end_src



**** Homebrew

**** MacOS Apps (Casks and MAS)

*** Hulu

**** Homebrew

**** MacOS Apps (Casks and MAS)

* Dotfiles Management

Shamelessy stealing this section from [[https://github.com/daviwil/dotfiles/blob/master/Systems.org#dotfiles-management][daviwil]]'s dotfiles.

#+begin_quote
Since I keep all of my important configuration files in Org Mode
code blocks, I have to ensure that the real configuration files 
are kept up to date when I sync the latest changes to my dotfiles
repo. I’ve written a couple of scripts to simplify that process:
#+end_quote

** Syncing

** Updating

* System Installation
