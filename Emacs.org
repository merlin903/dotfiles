#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el
* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
:END:

* Startup

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))

#+end_src

* System Settings

Some parts of the configuration require knowledge of whether Emacs is running on a Mac, or in iSH on iPhone.

#+begin_src emacs-lisp

  (if (file-exists-p "~/.emacs.d/per-system-settings.el")
      (load-file "~/.emacs.d/per-system-settings.el"))

  (defvar sa/is-ish nil
    "Determine if current system is iSH shell on an iPhone.")
  (defvar sa/is-darwin nil
    "Determine if current system is Darwin based.")

  (require 'subr-x)
  (setq sa/is-ish
	(string-match-p (regexp-quote "iSH") (string-trim (shell-command-to-string "uname -a"))))

  (setq sa/is-darwin
	(string-match-p (regexp-quote "Darwin") (string-trim (shell-command-to-string "uname -a"))))

#+end_src

* Keeping .emacs.d Clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

#+begin_src emacs-lisp

  ;; Keep transient cruft out of ~/.emacs.d
  (setq user-emacs-directory "~/.cache/emacs/"
	backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
	url-history-file (expand-file-name "url/history" user-emacs-directory)
	auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
	projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

  ;; Keep customization settings in a temporary file
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

* Package Managment

** =use-package=

Set up ELPA, MELPA, and Org package repos and load =use-package= to manage package configuration.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  ;; Add advice to automatically refresh packages
  (defvar sa/packages-refreshed nil
    "Flag for whether package lists have been refreshed yet.")

  (defun sa/package-refresh (&rest args)
    "Refresh package metadata, if needed.
  Ignores `ARGS'."
    (unless (eq sa/packages-refreshed t)
      (progn
	(package-refresh-contents)
	(setq sa/packages-refreshed t))))

  (advice-add 'package-install :before #'sa/package-refresh)

  ;; Initialize use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)

  ;; Ensure packages by default
  (setq use-package-always-ensure t)

#+end_src

** System Packages

Some packages require executables be available on the system. Using =use-package-ensure-system-package=, we can automatically install the missing executable using the proper package manager for the OS.

#+begin_src emacs-lisp

(use-package use-package-ensure-system-package)

#+end_src

* Update Load Path

Add a custom folder for any custom elisp we might need in the future

#+begin_src emacs-lisp

  ;; Add my elisp path to load-path
  (push "~/.emacs.d/elisp" load-path)

  ;; Add /usr/local/bin to exec-path
  (push "/usr/local/bin" exec-path)

#+end_src

* Helper Functions

** Platform Helpers

Here are a couple helpful functions for doing things based on what platform Emacs is running on. Borrowed from [[https://github.com/daviwil/dotfiles/][=daviwil/dotfiles=]].

#+begin_src emacs-lisp

  (defun platform-keyword-to-string (platform-keyword)
    "Helper function for changing OS platform keywords to system-type strings"
    (cond
     ((eq platform-keyword 'widnows) "windows-nt")
     ((eq platform-keyword 'cygwin) "cygwin")
     ((eq platform-keyword 'osx) "darwin")
     ((eq platform-keyword 'linux) "gnu/linux")))

  (defmacro on-platform-do (&rest platform-expressions)
    "Runs an elisp expression only on a particular platform"
    `(cond
      ,@(mapcar
	 (lambda (platform-expr)
	   (let ((keyword (nth 0 platform-expr))
		 (expr (nth 1 platform-expr)))
	     `(,(if (listp keyword)
		    `(or
		      ,@(mapcar
			 (lambda (kw) `(string-equal system-type ,(platform-keyword-to-string kw)))
			 keyword))
		  `(string-equal system-type ,(platform-keyword-to-string keyword)))
	       ,expr)))
	 platform-expressions)))

#+end_src

** Temporary Packages (try)

=try= let's us /try/ a package without adding it to our
configuration. Great for those times when you need a one-off mode.

#+begin_src emacs-lisp

  (use-package try)

#+end_src

* Server Mode

Start the Emacs server from this instance so that all =emacsclient= calls are routed here.

#+begin_src emacs-lisp

(server-start)

#+end_src

* Keybindings

** Keybinding Panel (which-key)

 [[https://github.com/justbur/emacs-which-key][=which-key=]] is great for getting an overview of what keybindings are available based on the prefix keys you entered.

 #+begin_src emacs-lisp

   (use-package which-key
     :init (which-key-mode)
     :diminish which-key-mode
     :config
     (setq which-key-idle-delay 0.3))

 #+end_src

** Simplify Leader Bindings (general.el)

 =general.el= is a fantastic library for defining prefixed keybindings, especially in conjunction with Evil modes.

 #+begin_src emacs-lisp

   (use-package general
     :config
     (general-auto-unbind-keys)
     (general-create-definer sa/leader-key-def
       :prefix "C-SPC")
     (general-create-definer sa/ctrl-c-keys
       :prefix "C-c"))

 #+end_src

* General Configuration

** User Interface

Clean up Emacs' user interface, and make it more minimal

#+begin_src emacs-lisp

  ;; Disable the startup message
  (setq inhibit-startup-message t)

  (unless sa/is-ish
    (scroll-bar-mode -1)		; Disable visible scrollbar
    (tool-bar-mode -1)			; Disable the toolbar
    (tooltip-mode -1)			; Disable tooltips
    (set-fringe-mode 10))		; Give some breathing room

  (menu-bar-mode -1)			; Disable the menu bar

  (setq visible-bell t)			; Set up the visible bell

#+end_src

Improve scrolling

#+begin_src emacs-lisp

  (unless sa/is-ish
    (setq mouse-wheel-scroll-amount
	  '(1 ((shift) . 1)))		; One line at a time
    (setq mouse-wheel-progressive-speed
	  nil)				; Don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't)	; Scroll window under mouse
    (setq scroll-step 1))		; Keyboard scroll one line at a time

#+end_src

Maximize windows by default

#+begin_src emacs-lisp

  (unless sa/is-ish
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

#+end_src

Enable line numbers and customize their format

#+begin_src emacs-lisp

  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Don't warn for large files

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

Don't warn when following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)

#+end_src

Don't warn when advice is added for functions

#+begin_src emacs-lisp

  (setq ad-redefinition-action 'accept)

#+end_src

** Theme

[[https://github.com/hlissner/emacs-doom-themes][Doom Themes]] is a good collection of some nicely designed themes, which integrate well with many Emacs packages.

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    (unless sa/is-ish
      (load-theme 'doom-solarized-dark)
      (doom-themes-visual-bell-config))
    (unless sa/is-darwin
      (load-theme 'misterioso)))

#+end_src

** Fonts

*** Set the font

Different platforms need different default font sizes.

#+begin_src emacs-lisp

  (unless sa/is-ish
    (on-platform-do
     ((windows cygwin) (set-face-attribute 'default nil :font "JetBrains Mono:antialias=subpixel" :height 130))
     (osx (set-face-attribute 'default nil :font "JetBrains Mono" :height 140))
     (linux (set-face-attribute 'default nil :font "JetBrains Mono" :height 220))))

#+end_src

*** TODO Enable proper Unicode glyph support

#+begin_src emacs-lisp

  ;; (defun sa/replace-unicode-font-mapping (block-name old-font new-font)
  ;;   (let* ((block-idx (cl-position-if
  ;; 		     (lambda (i) (string-equal (car i) block-name))
  ;; 		     unicode-fonts-block-font-mapping))
  ;; 	 (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
  ;; 	 (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
  ;;     (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
  ;; 	  `(,updated-block))))

  ;; (use-package unicode-fonts
  ;;   :if (not sa/is-ish)
  ;;   :custom
  ;;   (unicode-fonts-skip-fonts-groups '(low-quality-glyphs))
  ;;   :config
  ;;   ;; Fix the font mappings to use the right emoji font
  ;;   (mapcar
  ;;    (lambda (block-name)
  ;;      (sa/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
  ;;    '("Dingbats"
  ;;      "Emoticons"
  ;;      "Miscellaneous Symbols and Pictorgraphs"
  ;;      "Transport and Map Symbols"))
  ;;   (unicode-fonts-setup))

#+end_src

*** TODO Emojis in buffers

#+begin_src emacs-lisp

  ;; (use-package emojify
  ;;   :hook (erc-mode . emojify-mode)
  ;;   :commands emojify-mode)

#+end_src

** Mode Line

*** Basic Customization

#+begin_src emacs-lisp

  (setq display-time-format "%l:%M %p %b %y"
	display-time-default-load-average nil)

#+end_src

*** Enable Mode Diminishing

The [[https://github.com/myrjola/diminish.el][=diminish=]] package hides pesky minor modes from the mode line

#+begin_src emacs-lisp

  (use-package diminish)

#+end_src

*** Doom Modeline

    #+begin_src emacs-lisp

      (use-package minions
	:hook (doom-modeline-mode . minions-mode))

      (use-package doom-modeline
	:init (doom-modeline-mode 1)
	:custom
	(doom-modeline-height 15)
	(doom-modeline-bar-width 6)
	(doom-modeline-lsp t)
	(doom-modeline-github t)
	(doom-modeline-mu4e nil)
	(doom-modeline-irc nil)
	(doom-modeline-minor-modes t)
	(doom-modeline-persp-name nil)
	(doom-modeline-buffer-file-name-style 'truncate-except-project)
	(doom-modeline-major-mode-icon t))

    #+end_src

** Notifications

Use =alert= to show notifications from other packages.

#+begin_src emacs-lisp

  (use-package alert
    :commands alert
    :ensure-system-package growlnotify
    :config
    (setq alert-default-style 'growl))

#+end_src

** Auto-Reverting Changed Files

   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
   #+end_src

** UI Toggles

   #+begin_src emacs-lisp

     (sa/leader-key-def
       "t" '(:ignore t :which-key "toggles")
       "tw" 'whitespace-mode
       "tt" '(counsel-load-theme :which-key "choose theme"))

   #+end_src

** Highlight Matching Braces

   #+begin_src emacs-lisp

     (use-package paren
       :config (show-paren-mode 1))

   #+end_src

** Display World Time

=display-world-time= command provides a nice display of the time at a
specified list of timezones. Nice for working in a team with remote
members.

#+begin_src emacs-lisp

  (setq display-time-world-list
	'(("America/Los_Angeles" "Los Angeles")
	  ("America/Mexico_City" "Mexico City")
	  ("America/New_York" "New York")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

#+end_src

** Pinentry

Emacs can be prompted for the PIN of GPG private keys, we just need to
set =peg-pinentry-mode= to accomplish that:

#+begin_src emacs-lisp

  (use-package pinentry
    :ensure-system-package gpg
    :custom
    (epg-pinentry-mode 'loopback)
    :init
    (pinentry-start))

#+end_src

** TRAMP

   #+begin_src emacs-lisp
     (setq tramp-default-method "ssh")
   #+end_src

* Editing Configuration

** EditorConfig

=EditorConfig= tells different editors how to format code in a
cross-editor way.

#+begin_src emacs-lisp

  (use-package editorconfig
    :ensure-system-package editorconfig
    :config
    (editorconfig-mode 1))

#+end_src

#+begin_src ini :tangle ./.editorconfig

  # EditorConfig helps developers define and maintain consistent
  # coding styles between different editors and IDEs.

  # For more visit http://editorconfig.org.
  root = true

  [*]
  indent_style = space
  end_of_line = lf
  charset = utf-8
  trim_trailing_whitespace = true
  insert_final_newline = true
  indent_size = 2

  [*.{py,md}]
  indent_size = 4

  [*.md]
  trim_trailing_whitespace = false

#+end_src

** Parinfer for Lispy Languages

   #+begin_src emacs-lisp

     (use-package parinfer
       :hook ((clojure-mode . parinfer-mode)
	      (emacs-lisp-mode . parinfer-mode)
	      (common-lisp-mode . parinfer-mode)
	      (scheme-mode . parinfer-mode)
	      (lisp-mode . parinfer-mode))
       :config
       (setq parinfer-extensions
	     '(defaults      ; should be included
		pretty-parens    ; different paren styles for different modes
		smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab
		smart-yank)))    ; Yank behavior depends on mode

     (sa/leader-key-def
       "tp" 'parinfer-toggle-mode)

   #+end_src

* Configuration Files

** Helpers

   #+begin_src emacs-lisp

     (defun sa/org-file-jump-to-heading (org-file heading-title)
       "Jump to a specific heading in an Org file"
       (interactive)
       (find-file (expand-file-name org-file))
       (goto-char (point-min))
       (search-forward (concat "* " heading-title))
       (org-overview)
       (org-reveal)
       (org-show-subtree)
       (forward-line))

     (defun sa/org-file-show-headings (org-file)
       "Show headings in an Org file"
       (interactive)
       (find-file (expand-file-name org-file))
       (counsel-org-goto)
       (org-overview)
       (org-reveal)
       (org-show-subtree)
       (forward-line))

   #+end_src

** Bindings

   #+begin_src emacs-lisp

     (sa/leader-key-def
       "f" '(:ignore t :which-key "files")
       "fb" '((lambda () (interactive) (counsel-find-file "~/Documents/OrgFiles/")) :which-key "beorg")
       "fd" '(:ignore t :which-key "dotfiles")
       "fdd" '((lambda () (interactive) (find-file "~/Development/sametjan/dotfiles/Desktop.org")) :which-key "desktop")
       "fde" '((lambda () (interactive) (find-file (expand-file-name "~/Development/sametjan/dotfiles/Emacs.org"))) :which-key "edit config")
       "fdE" '((lambda () (interactive) (sa/org-file-show-headings "~/Development/sametjan/dotfiles/Emacs.org")) :which-key "edit config")
       "fds" '((lambda () (interactive) (sa/org-file-jump-to-heading "~/Development/sametjan/Systems.org" "Base Configuration")) :which-key "base system")
       "fdS" '((lambda () (interactive) (sa/org-file-jump-to-heading "~/Development/sametjan/Systems.org" system-name)) :which-key "this system"))

   #+end_src

* Stateful Keymaps with Hydra

  #+begin_src emacs-lisp

    (use-package hydra
      :defer 1)

  #+end_src

* Better Completions with Ivy

Ivy, Counsel, and Swiper allow me to navigate around quicker than
Emacs alone.

+ While in an Ivy minibuffer, you can search within the current
  results by using =S-SPC=
+ To quickly jump to an item in the minibuffer, use =C-'= to get Avy
  line jump keys
+ To see actions for the selected minibuffer item, use =M-o= and then
  press the action's key
+ *Super useful* Use =C-c C-o= to open =ivy-occur= to open the results
  in a separate buffer. From there you can click any item to perform
  the ivy action

#+begin_src emacs-lisp

  (use-package counsel
    :diminish
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("C-n" . ivy-next-line)
           ("C-p" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-n" . ivy-next-line)
           ("C-p" . ivy-previous-line)
           ("C-k" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-n" . ivy-next-line)
           ("C-p" . ivy-previous-line)
           ("C-k" . ivy-reverse-i-search-kill))
    :init (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-wrap t)
    (ivy-count-format "(%d/%d) ")
    (enable-recursive-buffers t)
    :config
    ;; Set minibuffer height for different commands
    (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
    (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

  (use-package ivy-hydra
    :defer t
    :after hydra)

  (use-package ivy-rich
    :init (ivy-rich-mode 1))

  (use-package smex      ;Adds M-x recent commands sorting for counsel-M-x
    :defer 1
    :after counsel)

  (use-package wgrep)

  (use-package ivy-posframe
    :custom
    (ivy-posframe-width 115)
    (ivy-posframe-win-width 115)
    (ivy-posframe-height 10)
    (ivy-posframe-min-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    ;; (setq ivy-posframe-parameters '((parent-frame . nil)
    ;;                                 (left-fringe . 8)
    ;;                                 (right-frindge . 8)))
    (ivy-posframe-mode 1))

  (sa/leader-key-def
    "r" '(ivy-resume :which-key "ivy resume")
    "ff" '(counsel-find-file :which-key "open file")
    "C-f" 'counsel-find-file
    "fr" '(counsel-recentf :which-key "recent files")
    "fR" '(revert-buffer :which-key "revert file")
    "fj" '(counsel-file-jump :which-key "jump to file"))

#+end_src

* Webkit

My Emacs is configured with the Webkit XWidget, but it's a little
difficult to remember the keys for everything, so I'm making it easier
on me, using my leader key.

#+begin_src emacs-lisp

  (use-package xwidget
    :custom
    (browse-url-browser-function 'xwidget-webkit-browse-url))

  (use-package search-web
    :bind ("C-c w" . 'search-web)
    :config
    (defun browse-url-default-browser (url &rest args)
      "Override `browse-url-default-browser' to use `xwidget-webkit' URL ARGS."
      (xwidget-webkit-browse-url url args)))

#+end_src

* Development

Configuration for programming languages and tools.

** Git

*** Magit

[[https://magit.vc/manual/magit/][Magit]] is an interface to Git. It makes things easier than using the
command line, and when combined with [[https://magit.vc/manual/forge/][Forge]], integrates with Github as
well.

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config (global-set-key (kbd "C-M-;") 'magit-status))

  (sa/leader-key-def
    "g" '(:ignore t :which-key "git")
    "gs" 'magit-status
    "gd" 'magit-diff-unstaged
    "gc" 'magit-branch-or-checkout
    "gl" '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb" 'magit-branch
    "gP" 'magit-push-current
    "gp" 'magit-pull-branch
    "gf" 'magit-fetch
    "gF" 'magit-fetch-all
    "gr" 'magit-rebase)

#+end_src

*** Forge

    #+begin_src emacs-lisp

      (use-package forge
        :after magit)

    #+end_src

*** Git Gutter

    #+begin_src emacs-lisp

      (use-package git-gutter
        :diminish
        :hook ((text-mode . git-gutter-mode)
               (prog-mode . git-gutter-mode))
        :config
        (setq git-gutter:update-interval 2
              git-gutter:modified-sign "≡"
              git-gutter:added-sign "≡"
              git-gutter:deleted-sign "≡")
        (set-face-foreground 'git-gutter:added "LightGreen")
        (set-face-foreground 'git-gutter:added "LightGoldenrod")
        (set-face-foreground 'git-gutter:added "LightCoral"))

    #+end_src

** Projectile

*** Initial Setup

    #+begin_src emacs-lisp

      (use-package projectile
        :ensure-system-package
        ((rg . ripgrep)
         (ag . the_silver_searcher))
        :diminish projectile-mode
        :config (projectile-mode)
        :bind-keymap ("C-c p" . projectile-command-map)
        :init
        (when (file-directory-p "~/Development")
          (setq projectile-project-search-path (cddr (directory-files "~/Development" t))))
        (setq projectile-switch-project-action #'projectile-dired))

      (use-package counsel-projectile
        :after projectile)

      (sa/leader-key-def
        "pf" 'counsel-projectile-find-file
        "ps" 'counsel-projectile-switch-project
        "pF" 'counsel-projectile-rg
        "pp" 'counsel-projectile
        "pc" 'projectile-compile-project
        "pd" 'projectile-dired)

    #+end_src

** Languages

*** Language Server Support

**** Eglot (disabled)
[[https://github.com/joaotavora/eglot][Eglot]] is a language server protocal client that appears to be easier
to setup than LSP.

#+begin_src emacs-lisp

  (use-package eglot
    :disabled t)

#+end_src

**** LSP

Used Eglot at first, but switching to LSP to use =dap-mode=

#+begin_src emacs-lisp

  (use-package ivy-xref
    :init (if (< emacs-major-version 27)
              (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
            (setq xref-show-definitions-function #'ivy-xref-show-defs)))

  (use-package lsp-mode
    :commands lsp
    :hook ((typescript-mode js2-mode web-mode) . lsp)
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point)))

  (sa/leader-key-def
    "l" '(:ignore t :which-key "lsp")
    "ld" 'xref-find-definitions
    "lr" 'xref-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-pref-reference
    "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    "lS" 'lsp-ui-sideline-mode
    "lX" 'lsp-execute-code-action)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t
          lsp-ui-sideline-show-hover nil
          lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))

#+end_src

*** TypeScript and JavaScript

Set up =nvm= so we can manage Node versions

#+begin_src emacs-lisp

  (use-package nvm
    :defer t)

#+end_src

Configure TypeScript and JavaScript language modes

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'")

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil))

  (use-package prettier-js
    :disabled t
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors nil))

#+end_src

*** Python

    #+begin_src emacs-lisp

      (use-package jedi
        :ensure-system-package (jedi . "pipx install jedi-language-server")
        :hook (python-mode . jedi:setup))

    #+end_src
