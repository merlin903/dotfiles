#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el
* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
:END:

* Startup

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))

#+end_src

* System Settings

Some parts of the configuration require knowledge of whether Emacs is running on a Mac, or in iSH on iPhone.

#+begin_src emacs-lisp

  (if (file-exists-p "~/.emacs.d/per-system-settings.el")
      (load-file "~/.emacs.d/per-system-settings.el"))

  (defvar sa/is-ish nil
    "Determine if current system is iSH shell on an iPhone.")
  (defvar sa/is-darwin nil
    "Determine if current system is Darwin based.")

  (require 'subr-x)
  (setq sa/is-ish
	(> (string-match-p "iSH" (string-trim (shell-command-to-string "uname -a"))) 0))

  (setq sa/is-darwin
	(> (string-match-p "Darwin" (string-trim (shell-command-to-string "uname -a"))) 0))

#+end_src

* Keeping .emacs.d Clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

#+begin_src emacs-lisp

  ;; Keep transient cruft out of ~/.emacs.d
  (setq user-emacs-directory "~/.cache/emacs/"
	backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
	url-history-file (expand-file-name "url/history" user-emacs-directory)
	auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
	projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

  ;; Keep customization settings in a temporary file
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

* Package Managment

** =use-package=

Set up ELPA, MELPA, and Org package repos and load =use-package= to manage package configuration.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  ;; Add advice to automatically refresh packages
  (defvar sa/packages-refreshed nil
    "Flag for whether package lists have been refreshed yet.")

  (defun sa/package-refresh (&rest args)
    "Refresh package metadata, if needed.
  Ignores `ARGS'."
    (unless (eq sa/packages-refreshed t)
      (progn
	(package-refresh-contents)
	(setq sa/packages-refreshed t))))

  (advice-add 'package-install :before #'sa/package-refresh)

  ;; Initialize use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)

  ;; Ensure packages by default
  (setq use-package-always-ensure t)

#+end_src

** System Packages

Some packages require executables be available on the system. Using =use-package-ensure-system-package=, we can automatically install the missing executable using the proper package manager for the OS.

#+begin_src emacs-lisp

(use-package use-package-ensure-system-package)

#+end_src

* Update Load Path

Add a custom folder for any custom elisp we might need in the future

#+begin_src emacs-lisp

  ;; Add my elisp path to load-path
  (push "~/.emacs.d/elisp" load-path)

#+end_src

* Helper Functions

** Platform Helpers

Here are a couple helpful functions for doing things based on what platform Emacs is running on. Borrowed from [[https://github.com/daviwil/dotfiles/][=daviwil/dotfiles=]].

#+begin_src emacs-lisp

  (defun platform-keyword-to-string (platform-keyword)
    "Helper function for changing OS platform keywords to system-type strings"
    (cond
     ((eq platform-keyword 'widnows) "windows-nt")
     ((eq platform-keyword 'cygwin) "cygwin")
     ((eq platform-keyword 'osx) "darwin")
     ((eq platform-keyword 'linux) "gnu/linux")))

  (defmacro on-platform-do (&rest platform-expressions)
    "Runs an elisp expression only on a particular platform"
    `(cond
      ,@(mapcar
	 (lambda (platform-expr)
	   (let ((keyword (nth 0 platform-expr))
		 (expr (nth 1 platform-expr)))
	     `(,(if (listp keyword)
		    `(or
		      ,@(mapcar
			 (lambda (kw) `(string-equal system-type ,(platform-keyword-to-string kw)))
			 keyword))
		  `(string-equal system-type ,(platform-keyword-to-string keyword)))
	       ,expr)))
	 platform-expressions)))

#+end_src

* Server Mode

Start the Emacs server from this instance so that all =emacsclient= calls are routed here.

#+begin_src emacs-lisp

(server-start)

#+end_src

